#!/usr/bin/env python3
"""
Demo Kingfisher A2A Agent - Google Agent-to-Agent Framework

Demo completo del agente Kingfisher operando en modo A2A,
mostrando todas las capabilities y modos de uso.

Demuestra:
1. Agent discovery (Agent Card)
2. Document processing capability
3. Knowledge retrieval capability  
4. Metadata analysis capability
5. HTTP server A2A-compliant
6. Direct agent usage

Ejecutar:
    python demos/demo_a2a_agent.py
"""

import asyncio
import sys
import os
import time
from pathlib import Path

# Agregar directorio ra√≠z al path
sys.path.insert(0, str(Path(__file__).parent.parent))

def print_header(title: str):
    """Imprime header con estilo"""
    print(f"\n{'='*60}")
    print(f" {title}")
    print(f"{'='*60}")

def print_step(step: str):
    """Imprime paso con estilo"""
    print(f"\nüî∏ {step}")

def print_result(result: dict):
    """Imprime resultado formateado"""
    print("üìã Resultado:")
    for key, value in result.items():
        if isinstance(value, dict):
            print(f"   {key}:")
            for k, v in value.items():
                print(f"     {k}: {v}")
        elif isinstance(value, list):
            print(f"   {key}: {len(value)} items")
            for i, item in enumerate(value[:2]):  # Mostrar solo los primeros 2
                print(f"     [{i}]: {str(item)[:100]}...")
        else:
            print(f"   {key}: {value}")

async def demo_direct_agent_usage():
    """Demo del agente en modo directo (sin HTTP server)"""
    print_header("DEMO 1: Uso Directo del Agente A2A")
    
    # Importar despu√©s de configurar el path
    from agents.kingfisher_agent import KingfisherAgent
    
    # Crear agente sin HTTP server para este demo
    print_step("Creando agente Kingfisher en modo directo...")
    agent = KingfisherAgent(
        agent_id="demo-agent-001",
        enable_http_server=False  # Solo agente, sin servidor HTTP
    )
    
    # Mostrar informaci√≥n del agente
    print_step("Informaci√≥n del agente:")
    agent_info = agent.get_agent_info()
    print_result(agent_info)
    
    # Demo 1: Process Documents
    print_step("1. Procesando documento de prueba...")
    sample_text = """
    Artificial Intelligence (AI) is transforming the world rapidly. 
    Machine learning algorithms are becoming more sophisticated each day.
    Natural Language Processing enables computers to understand human language.
    Deep learning networks can recognize patterns in complex data.
    """
    
    start_time = time.time()
    doc_result = await agent.process_document(
        content=sample_text,
        title="AI Overview Document",
        processing_mode="TRIPLE_FULL",
        include_llm=True
    )
    processing_time = time.time() - start_time
    
    print(f"‚è±Ô∏è  Tiempo de procesamiento: {processing_time:.2f}s")
    print_result(doc_result)
    
    # Demo 2: Retrieve Knowledge
    print_step("2. Recuperando conocimiento relevante...")
    
    start_time = time.time()
    search_result = await agent.retrieve_knowledge(
        query="What is machine learning?",
        search_mode="hybrid",
        top_k=3
    )
    search_time = time.time() - start_time
    
    print(f"‚è±Ô∏è  Tiempo de b√∫squeda: {search_time:.2f}s")
    print_result(search_result)
    
    # Demo 3: Analyze Metadata
    print_step("3. Analizando metadatos del sistema...")
    
    start_time = time.time()
    metadata_result = await agent.analyze_metadata(analysis_type="documents")
    analysis_time = time.time() - start_time
    
    print(f"‚è±Ô∏è  Tiempo de an√°lisis: {analysis_time:.2f}s")
    print_result(metadata_result)
    
    # Mostrar m√©tricas finales del agente
    print_step("M√©tricas finales del agente:")
    final_metrics = agent.get_metrics()
    print_result(final_metrics)
    
    return agent

async def demo_a2a_task_format():
    """Demo usando formato completo de tasks A2A"""
    print_header("DEMO 2: Formato Completo de Tasks A2A")
    
    from agents.kingfisher_agent import KingfisherAgent
    
    agent = KingfisherAgent(enable_http_server=False)
    
    # Task A2A completo para procesamiento de documentos
    print_step("Procesando task A2A completo...")
    
    a2a_task = {
        "id": "task-a2a-demo-001",
        "message": {
            "role": "user",
            "parts": [
                {
                    "kind": "text",
                    "text": "Please process this research paper about transformers and extract key concepts"
                },
                {
                    "kind": "data",
                    "data": {
                        "document_content": """
                        Attention Is All You Need
                        
                        The Transformer is a novel neural network architecture based entirely on attention mechanisms.
                        Unlike traditional sequence-to-sequence models that rely on recurrence or convolution,
                        the Transformer uses self-attention to compute representations of its input and output.
                        
                        Key innovations:
                        1. Multi-head attention mechanism
                        2. Positional encoding for sequence order
                        3. Feed-forward networks in each layer
                        4. Layer normalization and residual connections
                        
                        Results show that Transformers achieve state-of-the-art performance on translation tasks
                        while being more parallelizable than RNNs.
                        """
                    }
                }
            ]
        },
        "parameters": {
            "processing_mode": "TRIPLE_FULL",
            "include_llm": True,
            "title": "Attention Is All You Need Paper"
        }
    }
    
    result = await agent.process_task(a2a_task)
    print_result(result)
    
    return agent

async def demo_http_server_info():
    """Demo de informaci√≥n del servidor HTTP A2A"""
    print_header("DEMO 3: Servidor HTTP A2A")
    
    try:
        from agents.kingfisher_agent import KingfisherAgent
        
        print_step("Creando agente con servidor HTTP A2A...")
        agent = KingfisherAgent(
            agent_id="demo-http-agent",
            enable_http_server=True,
            server_host="localhost",
            server_port=8000
        )
        
        # Mostrar informaci√≥n del servidor
        print_step("Informaci√≥n del servidor A2A:")
        print("üåê Endpoints disponibles:")
        print("   GET  /.well-known/agent.json  - Agent Card discovery")
        print("   POST /tasks/send               - Sync task processing")
        print("   POST /tasks/sendSubscribe      - Streaming task processing")
        print("   POST /tasks/cancel             - Cancel running tasks")
        print("   GET  /tasks/{id}/status        - Get task status")
        print("   GET  /health                   - Health check")
        print("   GET  /metrics                  - Performance metrics")
        print("   GET  /docs                     - API documentation")
        
        # Mostrar Agent Card
        print_step("Agent Card (para discovery):")
        agent_card = agent.agent_card
        print(f"   Nombre: {agent_card['name']}")
        print(f"   Versi√≥n: {agent_card['version']}")
        print(f"   Capabilities: {len(agent_card['skills'])} skills")
        
        for skill in agent_card['skills']:
            print(f"     - {skill['name']}: {skill['description']}")
        
        print_step("Para iniciar el servidor HTTP:")
        print("   uvicorn agents.server.a2a_server:app --host 0.0.0.0 --port 8000")
        print("   Luego visitar: http://localhost:8000/docs")
        
        return agent
        
    except ImportError as e:
        print("‚ùå FastAPI no est√° disponible para el servidor HTTP")
        print("   Para instalarlo: pip install fastapi uvicorn")
        print(f"   Error: {e}")
        return None

async def demo_multi_capability_workflow():
    """Demo de workflow que usa m√∫ltiples capabilities"""
    print_header("DEMO 4: Workflow Multi-Capability")
    
    from agents.kingfisher_agent import KingfisherAgent
    
    agent = KingfisherAgent(enable_http_server=False)
    
    print_step("Workflow completo: Proceso ‚Üí B√∫squeda ‚Üí An√°lisis")
    
    # 1. Procesar m√∫ltiples documentos
    documents = [
        "Neural networks are computational models inspired by biological neural networks.",
        "Deep learning uses multiple layers to progressively extract higher-level features.",
        "Convolutional Neural Networks excel at image recognition tasks.",
        "Recurrent Neural Networks are designed for sequential data processing."
    ]
    
    print_step("1. Procesando m√∫ltiples documentos...")
    for i, doc in enumerate(documents):
        print(f"   Procesando documento {i+1}/4...")
        await agent.process_document(
            content=doc,
            title=f"ML Document {i+1}",
            processing_mode="TRIPLE_FULL"
        )
    
    # 2. Realizar b√∫squedas especializadas
    queries = [
        "What are neural networks?",
        "How does deep learning work?",
        "CNN image recognition",
        "RNN sequential processing"
    ]
    
    print_step("2. Realizando b√∫squedas especializadas...")
    for query in queries:
        result = await agent.retrieve_knowledge(query, top_k=2)
        print(f"   Query: {query}")
        print(f"   Resultados: {len(result.get('artifacts', []))}")
    
    # 3. An√°lisis completo de metadatos
    print_step("3. An√°lisis completo de metadatos...")
    analysis_types = ["documents", "entities", "relationships", "metrics"]
    
    for analysis_type in analysis_types:
        result = await agent.analyze_metadata(analysis_type)
        print(f"   An√°lisis {analysis_type}: ‚úÖ")
    
    # M√©tricas finales
    print_step("M√©tricas finales del workflow:")
    metrics = agent.get_metrics()
    print(f"   Tasks procesados: {metrics['tasks']['total_processed']}")
    print(f"   Tasa de √©xito: {metrics['tasks']['success_rate']:.1%}")
    print(f"   Uptime: {metrics['uptime_seconds']:.1f}s")
    
    return agent

async def main():
    """Funci√≥n principal del demo"""
    print("üêü KINGFISHER A2A AGENT - DEMO COMPLETO")
    print("   Google Agent-to-Agent Framework Implementation")
    print("   Sprint 3.2.4 - Final Component")
    
    try:
        # Demo 1: Uso directo del agente
        agent1 = await demo_direct_agent_usage()
        
        # Demo 2: Formato completo A2A
        agent2 = await demo_a2a_task_format()
        
        # Demo 3: Informaci√≥n del servidor HTTP
        agent3 = await demo_http_server_info()
        
        # Demo 4: Workflow multi-capability
        agent4 = await demo_multi_capability_workflow()
        
        print_header("üéâ DEMO COMPLETADO EXITOSAMENTE")
        print("‚úÖ Kingfisher A2A Agent totalmente funcional")
        print("‚úÖ Todas las capabilities operativas")
        print("‚úÖ Protocolo Google A2A implementado")
        print("‚úÖ HTTP server A2A-compliant configurado")
        print("‚úÖ LangGraph workflows funcionando")
        print("‚úÖ Integraci√≥n sin rupturas con sistemas existentes")
        
        print("\nüöÄ PR√ìXIMOS PASOS:")
        print("   1. Iniciar servidor HTTP: uvicorn agents.server.a2a_server:app --port 8000")
        print("   2. Probar endpoints: curl http://localhost:8000/.well-known/agent.json")
        print("   3. Explorar docs: http://localhost:8000/docs")
        print("   4. Integrar con otros agentes A2A del ecosistema")
        
        print("\nüìä SPRINT 3.2 STATUS:")
        print("   ‚úÖ Componente 1: Sistema de Base de Datos Relacional")
        print("   ‚úÖ Componente 2: Pipeline Triple Integration")  
        print("   ‚úÖ Componente 3: Limpieza y Reorganizaci√≥n del Codebase")
        print("   ‚úÖ Componente 4: Google A2A Agent Integration")
        print("\n   üéØ OBJETIVO PRINCIPAL COMPLETADO:")
        print("   ‚úÖ DOCUMENTOS ‚Üí CHUNKING ‚Üí EMBEDDING ‚Üí ALMACENAMIENTO TRIPLE ‚Üí AGENTE A2A")
        
    except Exception as e:
        print(f"\n‚ùå Error en el demo: {str(e)}")
        import traceback
        traceback.print_exc()
        
        print("\nüîß TROUBLESHOOTING:")
        print("   1. Verificar que todas las dependencias est√©n instaladas:")
        print("      pip install -r requirements.txt")
        print("   2. Verificar que el sistema base est√© funcionando:")
        print("      python tests/test_triple_processor_simple.py")
        print("   3. Para servidor HTTP, instalar FastAPI:")
        print("      pip install fastapi uvicorn")

if __name__ == "__main__":
    asyncio.run(main())